<?php

/**
 * @file
 * Installation hooks for team_work module.
 */

use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\user\Entity\Role;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\pathauto\Entity\PathautoPattern;

/**
 * Implements hook_install().
 */
function team_work_install() {
  // Reweight the administrator role.
  $role = Role::load('administrator');
  $role->setWeight(6);
  $role->save();
  // Remove permissions from anonymous user.
  $role = Role::load('anonymous');
  $perms = [
    'access comments',
    'access site-wide contact form',
    'use text format restricted_html',
    'view media',
  ];
  foreach ($perms as $perm) {
    $role->revokePermission($perm);
  }

  // Remove permissions from authenticated user.
  $role = Role::load('authenticated');
  $perms = [
    'access site-wide contact form',
  ];
  foreach ($perms as $perm) {
    $role->revokePermission($perm);
  }

  // Set weight of administrator role to 100.
  $role = Role::load('administrator');
  $role->setWeight(100);
  $role->save();

  // Install vocabulary terms.
  _team_work_create_issue_type_vocabulary();
  _team_work_create_issue_priority_vocabulary();
  _team_work_create_linked_issue_status_vocabulary();
  _team_work_create_team_roles_vocabulary();
  _team_work_create_issue_status_vocabulary();

  // Add new fields to user.
  _team_work_add_new_user_fields();
}

/**
 * Implements hook_uninstall().
 */
function team_work_uninstall() {

  // Disable the added user fields, and restore user_picture field.
  _team_work_remove_user_fields();

  $field = FieldStorageConfig::loadByName('node', 'field_team_member');
  if ($field) {
    $field->delete();
  }

  $field = FieldStorageConfig::loadByName('paragraph', 'field_team_member');
  if ($field) {
    $field->delete();
  }

  $field = FieldStorageConfig::loadByName('paragraph', 'field_role');
  if ($field) {
    $field->delete();
  }

  $entity = \Drupal::entityTypeManager()
    ->getStorage('paragraphs_type')
    ->load('team_member');
  if ($entity) {
    $entity->delete();
  }

  $field = FieldStorageConfig::loadByName('node', 'field_project_team');
  if ($field) {
    $field->delete();
  }

  $entity = \Drupal::entityTypeManager()
    ->getStorage('node_type')
    ->load('project_team');
  if ($entity) {
    $entity->delete();
  }

  $field = FieldStorageConfig::loadByName('node', 'field_project_key');
  if ($field) {
    $field->delete();
  }

  $field = FieldStorageConfig::loadByName('node', 'field_project_team');
  if ($field) {
    $field->delete();
  }

  $field = FieldStorageConfig::loadByName('node', 'field_project_lead');
  if ($field) {
    $field->delete();
  }

  $field = FieldStorageConfig::loadByName('node', 'field_default_assignee');
  if ($field) {
    $field->delete();
  }

  $field = FieldStorageConfig::loadByName('node', 'field_company_team');
  if ($field) {
    $field->delete();
  }

  $field = FieldStorageConfig::loadByName('node', 'field_company');
  if ($field) {
    $field->delete();
  }

  $field = FieldStorageConfig::loadByName('node', 'field_primary_team');
  if ($field) {
    $field->delete();
  }

  $entity = \Drupal::entityTypeManager()
    ->getStorage('node_type')
    ->load('project');
  if ($entity) {
    $entity->delete();
  }

  $entity = \Drupal::entityTypeManager()
    ->getStorage('node_type')
    ->load('company_team');
  if ($entity) {
    $entity->delete();
  }

  $entity = \Drupal::entityTypeManager()
    ->getStorage('node_type')
    ->load('company');
  if ($entity) {
    $entity->delete();
  }
  // Delete Team Work Vocabularies.
  $vocabs = [
    'issue_type',
    'issue_priority',
    'linked_issue_status',
    'issue_status',
    'team_roles',
    'sprint',
    'project_keys',
  ];
  foreach ($vocabs as $vocab) {
    $voc = Vocabulary::load($vocab);
    if (!is_null($voc)) {
      $voc->delete();
    }
  }

  if ($alias_entity = PathautoPattern::load('company')) {
    $alias_entity->delete();
  }

  if ($alias_entity = PathautoPattern::load('project')) {
    $alias_entity->delete();
  }

  if ($alias_entity = PathautoPattern::load('project_team')) {
    $alias_entity->delete();
  }

  if ($alias_entity = PathautoPattern::load('company_team')) {
    $alias_entity->delete();
  }

  // Delete Team Work Roles.
  $roles = [
    'company_manager',
    'project_administrator',
    'user_manager',
  ];
  foreach ($roles as $role) {
    $role_to_delete = Role::load($role);
    if (!is_null($role_to_delete)) {
      $role_to_delete->delete();
    }
  }

  $entity = \Drupal::entityTypeManager()
    ->getStorage('workflow')
    ->load('company');
  if (!is_null($entity)) {
    $entity->delete();
  }

}

/**
 * Helper function to create Issue Type vocabulary terms.
 */
function _team_work_create_issue_type_vocabulary() {
  // Machine name of the Taxonomy vocabulary.
  $vocab = 'issue_type';
  // Term names to be added in hierarchical order.
  $terms = [
    'Epic',
    'Story',
    'Task',
    'Bugfix',
    'Asset',
  ];
  _team_work_install_vocabulary_terms($vocab, $terms, TRUE);
}

/**
 * Helper function to create Issue Priority vocabulary terms.
 */
function _team_work_create_issue_priority_vocabulary() {
  // Machine name of the Taxonomy vocabulary.
  $vocab = 'issue_priority';
  // Term names to be added in hierarchical order.
  $terms = [
    'Immediate',
    'Urgent',
    'High',
    'Normal',
    'Low',
  ];
  _team_work_install_vocabulary_terms($vocab, $terms, TRUE);
}

/**
 * Helper function to create Linked Issue Status vocabulary terms.
 */
function _team_work_create_linked_issue_status_vocabulary() {
  // Machine name of the Taxonomy vocabulary.
  $vocab = 'linked_issue_status';
  // Term names to be added in hierarchical order.
  $terms = [
    'Blocked by',
    'Blocks',
    'Relates to',
    'Duplicate',
  ];
  _team_work_install_vocabulary_terms($vocab, $terms, TRUE);
}

/**
 * Helper function to create Linked Issue Status vocabulary terms.
 */
function _team_work_create_team_roles_vocabulary() {
  // Machine name of the Taxonomy vocabulary.
  $vocab = 'team_roles';
  // Term names to be added in hierarchical order.
  $terms = [
    'Project Manager',
    'Scrum Master',
    'Technical Lead',
    'Architect',
    'Designer',
    'Developer',
    'QA Specialist',
    'Client Product Owner',
    'Client Developer',
    'Client Member',
  ];
  _team_work_install_vocabulary_terms($vocab, $terms, TRUE);
}

/**
 * Helper function to create Issue Status vocabulary terms.
 */
function _team_work_create_issue_status_vocabulary() {
  // Machine name of the Taxonomy vocabulary.
  $vocab = 'issue_status';
  // Term names to be added in hierarchical order.
  $terms = [
    'New',
    'In Progress',
    'Feedback',
    'Complete',
    'UAT Passed',
    'UAT Feedback',
    'Closed',
  ];
  _team_work_install_vocabulary_terms($vocab, $terms, TRUE);
}

/**
 * Helper function to add new fields to user entity.
 */
function _team_work_add_new_user_fields() {

  $field = \Drupal::entityTypeManager()
    ->getStorage('entity_view_display')
    ->load('user.user.default')
    ->getComponent('field_first_name');

  if (!is_null($field)) {
    \Drupal::entityTypeManager()
      ->getStorage('entity_view_display')
      ->load('user.user.default')
      ->setComponent('field_first_name', [
        'weight' => 0,
        'label' => 'above',
        'type' => 'string',
        'region' => 'content',
        'settings' => [
          'link_to_entity' => FALSE,
        ],
      ])->save();
  }

  $field = \Drupal::entityTypeManager()
    ->getStorage('entity_view_display')
    ->load('user.user.default')
    ->getComponent('field_last_name');

  if (!is_null($field)) {
    \Drupal::entityTypeManager()
      ->getStorage('entity_view_display')
      ->load('user.user.default')
      ->setComponent('field_last_name', [
        'weight' => 1,
        'label' => 'above',
        'type' => 'string',
        'region' => 'content',
        'settings' => [
          'link_to_entity' => FALSE,
        ],
      ])->save();
  }

  $field = \Drupal::entityTypeManager()
    ->getStorage('entity_view_display')
    ->load('user.user.default')
    ->getComponent('user_picture');

  if (!is_null($field)) {
    \Drupal::entityTypeManager()
      ->getStorage('entity_view_display')
      ->load('user.user.default')
      ->removeComponent('user_picture')->save();
  }

  $field = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('user.user.default')
    ->getComponent('field_first_name');

  if (!is_null($field)) {
    \Drupal::entityTypeManager()
      ->getStorage('entity_form_display')
      ->load('user.user.default')
      ->setComponent('field_first_name', [
        'weight' => 0,
        'label' => 'above',
        'type' => 'string_textfield',
        'region' => 'content',
        'settings' => [
          'size' => 60,
          'placeholder' => '',
        ],
      ])->save();
  }

  $field = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('user.user.default')
    ->getComponent('field_last_name');

  if (!is_null($field)) {
    \Drupal::entityTypeManager()
      ->getStorage('entity_form_display')
      ->load('user.user.default')
      ->setComponent('field_last_name', [
        'weight' => 1,
        'label' => 'above',
        'type' => 'string_textfield',
        'region' => 'content',
        'settings' => [
          'size' => 60,
          'placeholder' => '',
        ],
      ])->save();
  }

  $field = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('user.user.default')
    ->getComponent('user_picture');

  if (!is_null($field)) {
    \Drupal::entityTypeManager()
      ->getStorage('entity_form_display')
      ->load('user.user.default')
      ->removeComponent('user_picture')->save();
  }
}

/**
 * Helper function to renove new fields to user entity.
 */
function _team_work_remove_user_fields() {

  $field = \Drupal::entityTypeManager()
    ->getStorage('entity_view_display')
    ->load('user.user.default')
    ->getComponent('field_first_name');

  if (!is_null($field)) {
    \Drupal::entityTypeManager()
      ->getStorage('entity_view_display')
      ->load('user.user.default')
      ->removeComponent('field_first_name')->save();
  }

  $field = \Drupal::entityTypeManager()
    ->getStorage('entity_view_display')
    ->load('user.user.default')
    ->getComponent('field_last_name');

  if (!is_null($field)) {
    \Drupal::entityTypeManager()
      ->getStorage('entity_view_display')
      ->load('user.user.default')
      ->removeComponent('field_last_name')->save();
  }

  $field = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('user.user.default')
    ->getComponent('field_first_name');

  if (!is_null($field)) {
    \Drupal::entityTypeManager()
      ->getStorage('entity_form_display')
      ->load('user.user.default')
      ->removeComponent('field_first_name')->save();
  }

  $field = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('user.user.default')
    ->getComponent('field_last_name');

  if (!is_null($field)) {
    \Drupal::entityTypeManager()
      ->getStorage('entity_form_display')
      ->load('user.user.default')
      ->removeComponent('field_last_name')->save();
  }

  $field = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('user.user.default')
    ->getComponent('user_picture');

  if (!is_null($field)) {
    \Drupal::entityTypeManager()
      ->getStorage('entity_form_display')
      ->load('user.user.default')
      ->setComponent('user_picture', [
        'weight' => -1,
        'type' => 'image_image',
        'region' => 'content',
        'settings' => [
          'progress_indicator' => 'throbber',
          'preview_image_style' => 'thumbnail',
        ],
      ])->save();
  }

  $field = \Drupal::entityTypeManager()
    ->getStorage('entity_view_display')
    ->load('user.user.default')
    ->getComponent('user_picture');

  if (!is_null($field)) {
    \Drupal::entityTypeManager()
      ->getStorage('entity_view_display')
      ->load('user.user.default')
      ->setComponent('user_picture', [
        'weight' => 0,
        'type' => 'image',
        'region' => 'content',
        'label' => 'hidden',
        'settings' => [
          'image_link' => 'content',
          'image_style' => 'thumbnail',
        ],
      ])->save();
  }

  $field = FieldStorageConfig::loadByName('user', 'field_first_name');
  if ($field) {
    $field->delete();
  }

  $field = FieldStorageConfig::loadByName('user', 'field_last_name');
  if ($field) {
    $field->delete();
  }

}
